
==================== FINAL INTERFACE ====================
2017-03-22 20:20:12.978863 UTC

interface main@main:Main 8002
  interface hash: 7c7c5df92dbf4be3f82ae62813ca1b53
  ABI hash: 232fe1ba9cc19cf4b93ba67574733c9d
  export-list hash: aace6f87e856d7ef4f89dcfa117df7bb
  orphan hash: 1bd44cfb7ef1c7c71903b7cc0f17328d
  flag hash: adbbc0f8689dfef9059d1f6c38e5131e
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.args
  Main.favourite
  Main.main
  Main.mymapM_
  Main.readInts2
  Main.readInts3
  Main.readInts4
  Main.readInts5
  Main.readInts6
  Main.readTwoIntsAndSum
  Main.wc
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      test-0.1.0.0@test-0.1.0.0-Gkeqybbg3nPHn1APaor3JQ
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Control.Applicative 32430a90492e727f4bd80db71c28600c
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.Char 01433d23661edb6e5ef1536ef1e6774c
import  -/  base-4.9.1.0:Data.Either 20b09ef8d0a5b74fdec011c40c1587f5
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:Data.Traversable 556020d7cf3c4a34a774600512918a37
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.Environment 08cb808e8e6a7821e6f8cfa76a977431
import  -/  base-4.9.1.0:System.IO c9de64c5f5407c4cf1c52500c4d15200
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  test-0.1.0.0@test-0.1.0.0-Gkeqybbg3nPHn1APaor3JQ:Lib eec950a941e61d8de7a13ad2e3930612
7ea9d77eee6699f12c46d9dce400a3c1
  $sreadMaybe :: GHC.Base.String -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Base.String) ->
                 case Text.Read.readEither
                        @ GHC.Types.Int
                        GHC.Read.$fReadInt
                        s of wild {
                   Data.Either.Left ds -> GHC.Base.Nothing @ GHC.Types.Int
                   Data.Either.Right a1 -> GHC.Base.Just @ GHC.Types.Int a1 }) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
2311be7b964ccf9f83309c3d7eda9b97
  args :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.args1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
1f21ea29569181c541f45604f79dbdf3
  args1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Environment.getArgs1 s of ds1 { (#,#) ipv ipv1 ->
                 Main.args2
                   @ [GHC.Types.Char]
                   System.IO.putStrLn1
                     `cast`
                   (<GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   ipv1
                   ipv }) -}
be09a9aa33ea60bccc5f48ecbb513528
  args2 ::
    (a -> GHC.Types.IO ())
    -> [a]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,A)))><S,1*U><S,U> -}
e06a96758a06007e504b8a845ebff380
  favourite :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.favourite1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
4c11fefc1e6ad0f0f4b3fdc70fa5404d
  favourite1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
d9c0dee8a685c5ed422401aaa63f23bf
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
01d62c2c484918d4b5d94b688c90c90e
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
129a1a814fa667791781f32a098e848d
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
f4b13bd412b9c23c9e09be2beddffadc
  mymapM_ :: GHC.Base.Monad m => (a -> m ()) -> [a] -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,U(A,A,C(C1(U)),C(U),A)><L,C(U)><S,1*U> -}
40653dbef3747aa0150cad04c15a4956
  readInts2 :: [GHC.Base.String] -> GHC.Base.Maybe [GHC.Types.Int]
  {- Arity: 1, Strictness: <S,1*U> -}
c60b47688b06ad1387bacdf9debeb563
  readInts3 :: [GHC.Base.String] -> GHC.Base.Maybe [GHC.Types.Int]
  {- Arity: 1, Strictness: <S,1*U>, Unfolding: (Main.readInts2) -}
9103ee7d19b4a5c83a5835cb24e794ee
  readInts4 :: [GHC.Base.String] -> GHC.Base.Maybe [GHC.Types.Int]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (xs :: [GHC.Base.String]) ->
                 Main.readInts4_go
                   (GHC.Base.build
                      @ (GHC.Base.Maybe GHC.Types.Int)
                      (\ @ b1
                         (c :: GHC.Base.Maybe GHC.Types.Int -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ [GHC.Types.Char]
                         @ b1
                         (GHC.Base.mapFB
                            @ (GHC.Base.Maybe GHC.Types.Int)
                            @ b1
                            @ [GHC.Types.Char]
                            c
                            Main.$sreadMaybe)
                         n
                         xs))) -}
a7afcfeb18fabf6daab535579604c2a8
  readInts4_go ::
    [GHC.Base.Maybe GHC.Types.Int] -> GHC.Base.Maybe [GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
bc0a28029c4a9922356611011fd269c2
  readInts5 ::
    [GHC.Base.String]
    -> Data.Either.Either GHC.Base.String [GHC.Types.Int]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (xs :: [GHC.Base.String]) -> Main.readInts5_go xs) -}
6b45e1eaad5975f1a000ff466a2da5ee
  readInts5_go ::
    [[GHC.Types.Char]]
    -> Data.Either.Either [GHC.Types.Char] [GHC.Types.Int]
  {- Arity: 1, Strictness: <S,1*U> -}
d86600a736f0a6bbdb4f44bef3597953
  readInts6 :: [GHC.Base.String] -> GHC.Base.Maybe [GHC.Types.Int]
  {- Arity: 1, Strictness: <S,1*U> -}
048967a1638e5f16886ce51296c9c3fb
  readTwoIntsAndSum ::
    [GHC.Base.String] -> GHC.Base.Maybe [GHC.Types.Int]
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (xs :: [GHC.Base.String]) ->
                 let {
                   ds :: (GHC.Base.String, [GHC.Base.String])
                   = case xs of wild {
                       [] -> Main.readTwoIntsAndSum3 : s1 ys -> (s1, ys) }
                 } in
                 case Text.Read.readEither6
                        @ GHC.Types.Int
                        (Text.ParserCombinators.ReadP.run
                           @ GHC.Types.Int
                           Main.readTwoIntsAndSum2
                           (case ds of ds1 { (,) s1 ys -> s1 })) of wild {
                   [] -> GHC.Base.Nothing @ [GHC.Types.Int]
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> case Text.Read.readEither6
                                  @ GHC.Types.Int
                                  (Text.ParserCombinators.ReadP.run
                                     @ GHC.Types.Int
                                     Main.readTwoIntsAndSum2
                                     (case ds of ds2 { (,) s1 ys ->
                                      case ys of wild2 {
                                        []
                                        -> case Main.readTwoIntsAndSum1 ret_ty GHC.Base.String of {}
                                        : s2 ds3 -> s2 } })) of wild2 {
                             [] -> GHC.Base.Nothing @ [GHC.Types.Int]
                             : x1 ds2
                             -> case ds2 of wild3 {
                                  []
                                  -> GHC.Base.Just
                                       @ [GHC.Types.Int]
                                       (GHC.Types.:
                                          @ GHC.Types.Int
                                          x
                                          (GHC.Types.:
                                             @ GHC.Types.Int
                                             x1
                                             (GHC.Types.:
                                                @ GHC.Types.Int
                                                (GHC.Num.$fNumInt_$c+ x x1)
                                                (GHC.Types.[] @ GHC.Types.Int))))
                                  : ipv ipv1 -> GHC.Base.Nothing @ [GHC.Types.Int] } }
                        : ipv ipv1 -> GHC.Base.Nothing @ [GHC.Types.Int] } }) -}
1e52f2e23891dd5bcf1b581a06ebe013
  readTwoIntsAndSum1 :: (GHC.Base.String)
  {- Strictness: x -}
a3f6a6a94f55f25b69a23b974f095941
  readTwoIntsAndSum2 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: (GHC.Read.$fReadInt3
                   GHC.Read.$fReadInt_$sconvertInt
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Types.Int
                   (Text.Read.readEither5 @ GHC.Types.Int)) -}
509ca5c2f8d5ad602dfc6ff5b4a564ae
  readTwoIntsAndSum3 :: (GHC.Base.String, [GHC.Base.String])
  {- Strictness: x -}
680bd58732d5b971d7602d15b42082bf
  wc :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
"SPEC/Main readMaybe @ Int" [ALWAYS] forall ($dRead :: GHC.Read.Read
                                                         GHC.Types.Int)
  Text.Read.readMaybe @ GHC.Types.Int $dRead = Main.$sreadMaybe
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

